openapi: 3.0.0
info:
  title: Keep-Alive API
  version: 2.0.0
  description: |
    API documentation for the Keep-Alive service.
    
    Keep-Alive helps maintain 100% uptime for your applications by monitoring websites and sending notifications when they go down.
  contact:
    name: Keep-Alive Team

servers:
  - url: https://api.keep-alive.com/api/v2
    description: Production Server
  - url: http://localhost:3000/api/v2
    description: Development Server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    apiKey:
      type: apiKey
      in: header
      name: X-API-KEY

  schemas:
    User:
      type: object
      properties:
        _id:
          type: string
          format: uuid
          example: "60d21b4667d0d8992e610c85"
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        isVerified:
          type: boolean
          example: true
        website_offline_alert:
          type: boolean
          example: true
        role:
          type: string
          enum: [user, admin, premium]
          example: "user"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Website:
      type: object
      properties:
        _id:
          type: string
          format: uuid
          example: "60d21b4667d0d8992e610c85"
        url:
          type: string
          format: uri
          example: "https://example.com"
        owner:
          type: string
          format: uuid
          example: "60d21b4667d0d8992e610c85"
        owner_email:
          type: string
          format: email
          example: "john.doe@example.com"
        ping_time:
          type: string
          example: "5m"
          description: "Format: [number][s|m|h|d] (seconds, minutes, hours, days)"
        status:
          type: string
          enum: [online, offline]
          example: "online"
        notify_offline:
          type: boolean
          example: true
        offline_ping_count:
          type: integer
          example: 0
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Log:
      type: object
      properties:
        _id:
          type: string
          format: uuid
        url:
          type: string
          format: uri
          example: "https://example.com"
        status:
          type: string
          example: "200"
        responseTime:
          type: number
          format: float
          example: 235.45
        pingAt:
          type: string
          format: date-time

    Feedback:
      type: object
      properties:
        _id:
          type: string
          format: uuid
        rating:
          type: number
          minimum: 1
          maximum: 5
          example: 4
        comment:
          type: string
          example: "Great service! Very reliable."
        user:
          type: string
          format: uuid
        user_email:
          type: string
          format: email
          example: "john.doe@example.com"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Error:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
        details:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        password:
          type: string
          format: password
          example: "password123"

    RegisterRequest:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        password:
          type: string
          format: password
          example: "password123"

    TokenResponse:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        accessToken:
          type: string
        refreshToken:
          type: string
        message:
          type: string
          example: "User logged in successfully"

    OTPVerifyRequest:
      type: object
      required:
        - email
        - otp
      properties:
        email:
          type: string
          format: email
          example: "john.doe@example.com"
        otp:
          type: integer
          example: 123456

  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ForbiddenError:
      description: The server understood the request but refuses to authorize it
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFoundError:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ValidationError:
      description: Validation error in request parameters
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

security:
  - bearerAuth: []
  - apiKey: []

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  data:
                    $ref: '#/components/schemas/User'
                  message:
                    type: string
                    example: "User registered successfully"
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'

  /users/{id}:
    parameters:
      - name: id
        in: path
        description: User ID
        required: true
        schema:
          type: string
          format: uuid
        example: "60d21b4667d0d8992e610c85"
    get:
      tags:
        - Users
      summary: Get a user
      description: Get a specific user by ID
      operationId: getUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  data:
                    $ref: '#/components/schemas/User'
                  message:
                    type: string
                    example: "User retrieved successfully"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      tags:
        - Users
      summary: Update a user
      description: Update a specific user by ID (user can only update their own profile)
      operationId: updateUser
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 3
                  maxLength: 30
                  example: "John Smith"
                email:
                  type: string
                  format: email
                  example: "john.smith@example.com"
                isVerified:
                  type: boolean
                  example: true
                website_offline_alert:
                  type: boolean
                  example: true
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  data:
                    $ref: '#/components/schemas/User'
                  message:
                    type: string
                    example: "User updated successfully"
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Users
      summary: Delete a user
      description: Delete a specific user by ID (user can only delete their own account)
      operationId: deleteUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  data:
                    $ref: '#/components/schemas/User'
                  message:
                    type: string
                    example: "User deleted successfully"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/ServerError'

  /health:
    get:
      tags:
        - System
      summary: Health check
      description: Check if the API is running
      operationId: healthCheck
      responses:
        '200':
          description: API is running
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "UP"
                  timestamp:
                    type: string
                    format: date-time
                  version:
                    type: string
                    example: "2.0.0"
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'

  /logs:
    get:
      tags:
        - Logs
      summary: Get logs for a website
      description: Get ping logs for a specific website URL
      operationId: getLogs
      security:
        - bearerAuth: []
      parameters:
        - name: url
          in: query
          description: Website URL
          required: true
          schema:
            type: string
            format: uri
          example: "https://example.com"
      responses:
        '200':
          description: Logs retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Log'
                  message:
                    type: string
                    example: "Logs retrieved successfully"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Logs
      summary: Delete logs for a website
      description: Delete all ping logs for a specific website URL
      operationId: deleteLogs
      security:
        - bearerAuth: []
      parameters:
        - name: url
          in: query
          description: Website URL
          required: true
          schema:
            type: string
            format: uri
          example: "https://example.com"
      responses:
        '200':
          description: Logs deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "Logs deleted successfully"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'

  /feedbacks:
    get:
      tags:
        - Feedback
      summary: Get all feedbacks
      description: Get all feedbacks (user can only see their own feedbacks)
      operationId: getFeedbacks
      security:
        - bearerAuth: []
      parameters:
        - name: rating
          in: query
          description: Filter by rating
          schema:
            type: integer
            minimum: 1
            maximum: 5
      responses:
        '200':
          description: Feedbacks retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Feedback'
                  message:
                    type: string
                    example: "Feedbacks retrieved successfully"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Feedback
      summary: Create feedback
      description: Submit feedback for the Keep-Alive service
      operationId: createFeedback
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - rating
                - comment
              properties:
                rating:
                  type: integer
                  minimum: 1
                  maximum: 5
                  example: 4
                comment:
                  type: string
                  example: "Great service! Very reliable."
      responses:
        '201':
          description: Feedback created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  data:
                    $ref: '#/components/schemas/Feedback'
                  message:
                    type: string
                    example: "Feedback created successfully"
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'

  /feedbacks/{id}:
    parameters:
      - name: id
        in: path
        description: Feedback ID
        required: true
        schema:
          type: string
          format: uuid
        example: "60d21b4667d0d8992e610c85"
    get:
      tags:
        - Feedback
      summary: Get a feedback
      description: Get a specific feedback by ID
      operationId: getFeedback
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Feedback retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  data:
                    $ref: '#/components/schemas/Feedback'
                  message:
                    type: string
                    example: "Feedback retrieved successfully"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Feedback
      summary: Delete a feedback
      description: Delete a specific feedback by ID (user can only delete their own feedbacks)
      operationId: deleteFeedback
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Feedback deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 204
                  message:
                    type: string
                    example: "Feedback deleted successfully"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'

  /users:
    get:
      tags:
        - Users
      summary: Get users
      description: Get a list of users (with optional filters)
      operationId: getUsers
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            minimum: 1
          example: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
          example: 10
        - name: id
          in: query
          description: Filter by user ID
          schema:
            type: string
            format: uuid
        - name: email
          in: query
          description: Filter by email
          schema:
            type: string
            format: email
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  data:
                    type: object
                    properties:
                      docs:
                        type: array
                        items:
                          $ref: '#/components/schemas/User'
                      totalDocs:
                        type: integer
                      limit:
                        type: integer
                      totalPages:
                        type: integer
                      page:
                        type: integer
                      pagingCounter:
                        type: integer
                      hasPrevPage:
                        type: boolean
                      hasNextPage:
                        type: boolean
                      prevPage:
                        type: integer
                        nullable: true
                      nextPage:
                        type: integer
                        nullable: true
                  message:
                    type: string
                    example: "Users retrieved successfully"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'

  /websites/{id}/history:
    parameters:
      - name: id
        in: path
        description: Website ID
        required: true
        schema:
          type: string
          format: uuid
        example: "60d21b4667d0d8992e610c85"
      - name: days
        in: query
        description: Number of days of history
        schema:
          type: integer
          minimum: 1
          maximum: 30
          default: 7
        example: 7
      - name: interval
        in: query
        description: Grouping interval
        schema:
          type: string
          enum: [hour, day]
          default: hour
        example: "hour"
    get:
      tags:
        - Websites
      summary: Get website history
      description: Get historical data for a specific website for chart visualization
      operationId: getWebsiteHistory
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Website history retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  data:
                    type: object
                    properties:
                      labels:
                        type: array
                        items:
                          type: string
                        example: ["2023-06-01 00:00", "2023-06-01 01:00"]
                      datasets:
                        type: object
                        properties:
                          responseTime:
                            type: array
                            items:
                              type: number
                            example: [234.5, 245.2]
                          uptime:
                            type: array
                            items:
                              type: number
                            example: [100, 100]
                          status:
                            type: array
                            items:
                              type: number
                            example: [100, 100]
                      summary:
                        type: object
                        properties:
                          totalChecks:
                            type: integer
                            example: 168
                          avgResponseTime:
                            type: number
                            example: 234.5
                          uptime:
                            type: number
                            example: 99.8
                          downtime:
                            type: number
                            example: 0.2
                  message:
                    type: string
                    example: "Website history retrieved successfully"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'

  /websites/{id}:
    parameters:
      - name: id
        in: path
        description: Website ID
        required: true
        schema:
          type: string
          format: uuid
        example: "60d21b4667d0d8992e610c85"
    get:
      tags:
        - Websites
      summary: Get a website
      description: Get a specific website by ID
      operationId: getWebsite
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Website retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  data:
                    allOf:
                      - $ref: '#/components/schemas/Website'
                      - type: object
                        properties:
                          stats:
                            type: object
                            properties:
                              uptime:
                                type: number
                                example: 99.8
                              logs:
                                type: integer
                                example: 10
                              avgResponseTime:
                                type: number
                                example: 234.5
                  message:
                    type: string
                    example: "Website retrieved successfully"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      tags:
        - Websites
      summary: Update a website
      description: Update a specific website by ID
      operationId: updateWebsite
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                ping_time:
                  type: string
                  example: "10m"
                  description: "Format: [number][s|m|h|d] (seconds, minutes, hours, days)"
                notify_offline:
                  type: boolean
                  example: true
      responses:
        '200':
          description: Website updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  data:
                    $ref: '#/components/schemas/Website'
                  message:
                    type: string
                    example: "Website updated successfully"
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      tags:
        - Websites
      summary: Delete a website
      description: Delete a specific website by ID
      operationId: deleteWebsite
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Website deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  data:
                    $ref: '#/components/schemas/Website'
                  message:
                    type: string
                    example: "Website deleted successfully"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      description: Authenticate a user and return access and refresh tokens
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'

  /auth/send-verification-email:
    post:
      tags:
        - Authentication
      summary: Send verification email
      description: Send a verification email to the user
      operationId: sendVerificationEmail
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: "john.doe@example.com"
      responses:
        '200':
          description: Email sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "Email sent successfully"
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'

  /auth/verify-email-otp:
    post:
      tags:
        - Authentication
      summary: Verify email with OTP
      description: Verify user's email with the provided OTP
      operationId: verifyEmail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OTPVerifyRequest'
      responses:
        '200':
          description: Email verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "Email verified successfully"
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'

  /auth/forgot-password:
    post:
      tags:
        - Authentication
      summary: Send forgot password OTP
      description: Send a forgot password OTP to the user's email
      operationId: sendForgotPasswordEmail
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: "john.doe@example.com"
      responses:
        '200':
          description: Email sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "Email sent successfully"
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'

  /auth/forgot-password-verify-otp:
    post:
      tags:
        - Authentication
      summary: Verify forgot password OTP
      description: Verify the OTP for password reset
      operationId: verifyForgotPasswordOTP
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OTPVerifyRequest'
      responses:
        '200':
          description: OTP verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "OTP verified successfully"
        '400':
          $ref: '#/components/responses/ValidationError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'

  /auth/forgot-password-set:
    post:
      tags:
        - Authentication
      summary: Reset password after OTP verification
      description: Reset user's password after OTP verification
      operationId: forgotPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: "john.doe@example.com"
                password:
                  type: string
                  format: password
                  example: "newPassword123"
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "Password reset successfully"
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'

  /auth/change-password:
    post:
      tags:
        - Authentication
      summary: Change password
      description: Change user's password
      operationId: changePassword
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - oldPassword
                - newPassword
              properties:
                oldPassword:
                  type: string
                  format: password
                  example: "oldPassword123"
                newPassword:
                  type: string
                  format: password
                  example: "newPassword123"
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "Password changed successfully"
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'

  /auth/refresh-token:
    post:
      tags:
        - Authentication
      summary: Refresh token
      description: Refresh access token using refresh token
      operationId: refreshTokens
      requestBody:
                required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  data:
                    type: object
                    properties:
                      accessToken:
                        type: string
                      refreshToken:
                        type: string
                  message:
                    type: string
                    example: "Token refreshed successfully"
              example:
                code: 200
                data:
                  accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  refreshToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                message: "Token refreshed successfully"
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 401
                message: "Invalid refresh token"
        '500':
          $ref: '#/components/responses/ServerError'

  /auth/me:
    get:
      tags:
        - Authentication
      summary: Get logged in user
      description: Get the currently logged in user's information
      operationId: loggedInUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  message:
                    type: string
                    example: "User fetched successfully"
              example:
                code: 200
                data: [
                  {
                    _id: "60d21b4667d0d8992e610c85",
                    name: "John Doe",
                    email: "john.doe@example.com",
                    isVerified: true,
                    website_offline_alert: true,
                    role: "user",
                    createdAt: "2023-06-01T12:00:00Z",
                    updatedAt: "2023-06-01T12:00:00Z"
                  }
                ]
                message: "User fetched successfully"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'

  /websites:
    get:
      tags:
        - Websites
      summary: Get all websites (admin only)
      description: Get a list of all websites (admin only)
      operationId: getWebsites
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Websites retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  data:
                    type: object
                    properties:
                      docs:
                        type: array
                        items:
                          $ref: '#/components/schemas/Website'
                      totalDocs:
                        type: integer
                      limit:
                        type: integer
                      totalPages:
                        type: integer
                      page:
                        type: integer
                      pagingCounter:
                        type: integer
                      hasPrevPage:
                        type: boolean
                      hasNextPage:
                        type: boolean
                      prevPage:
                        type: integer
                        nullable: true
                      nextPage:
                        type: integer
                        nullable: true
                  message:
                    type: string
                    example: "Websites retrieved successfully"
              example:
                code: 200
                data:
                  docs: [
                    {
                      _id: "60d21b4667d0d8992e610c85",
                      url: "https://example.com",
                      owner: "60d21b4667d0d8992e610c85",
                      owner_email: "john.doe@example.com",
                      ping_time: "5m",
                      status: "online",
                      notify_offline: true,
                      offline_ping_count: 0,
                      createdAt: "2023-06-01T12:00:00Z",
                      updatedAt: "2023-06-01T12:00:00Z"
                    }
                  ]
                  totalDocs: 1
                  limit: 20
                  totalPages: 1
                  page: 1
                  pagingCounter: 1
                  hasPrevPage: false
                  hasNextPage: false
                  prevPage: null
                  nextPage: null
                message: "Websites retrieved successfully"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          description: Only administrators can access all websites
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 403
                message: "Only administrators can access all websites"
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Websites
      summary: Add a new website
      description: Add a new website to monitor
      operationId: addWebsite
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - url
              properties:
                url:
                  type: string
                  format: uri
                  example: "https://example.com"
                ping_time:
                  type: string
                  example: "5m"
                  description: "Format: [number][s|m|h|d] (seconds, minutes, hours, days)"
            examples:
              addWebsite:
                summary: Add website with default ping interval
                value:
                  url: "https://example.com"
              addWebsiteWithCustomInterval:
                summary: Add website with custom ping interval
                value:
                  url: "https://example.com"
                  ping_time: "10m"
      responses:
        '201':
          description: Website added to monitoring successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  data:
                    $ref: '#/components/schemas/Website'
                  message:
                    type: string
                    example: "Website added to monitoring successfully"
              example:
                code: 201
                data:
                  _id: "60d21b4667d0d8992e610c85"
                  url: "https://example.com"
                  owner: "60d21b4667d0d8992e610c85"
                  owner_email: "john.doe@example.com"
                  ping_time: "5m"
                  status: "online"
                  notify_offline: true
                  offline_ping_count: 0
                  createdAt: "2023-06-01T12:00:00Z"
                  updatedAt: "2023-06-01T12:00:00Z"
                message: "Website added to monitoring successfully"
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '409':
          description: URL already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                code: 409
                message: "URL already exists in your monitoring list"
        '500':
          $ref: '#/components/responses/ServerError'

  /websites/me:
    get:
      tags:
        - Websites
      summary: Get user websites
      description: Get websites for the logged in user
      operationId: getLoggedInUserWebsites
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            default: 1
          example: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            default: 10
            maximum: 50
          example: 10
        - name: status
          in: query
          description: Filter by status
          schema:
            type: string
            enum: [online, offline]
      responses:
        '200':
          description: User websites retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  data:
                    type: object
                    properties:
                      docs:
                        type: array
                        items:
                          allOf:
                            - $ref: '#/components/schemas/Website'
                            - type: object
                              properties:
                                stats:
                                  type: object
                                  properties:
                                    uptime:
                                      type: number
                                      example: 99.8
                                    logs:
                                      type: integer
                                      example: 100
                                    avgResponseTime:
                                      type: number
                                      example: 234.5
                      totalDocs:
                        type: integer
                      limit:
                        type: integer
                      totalPages:
                        type: integer
                      page:
                        type: integer
                      pagingCounter:
                        type: integer
                      hasPrevPage:
                        type: boolean
                      hasNextPage:
                        type: boolean
                      prevPage:
                        type: integer
                        nullable: true
                      nextPage:
                        type: integer
                        nullable: true
                  message:
                    type: string
                    example: "User websites retrieved successfully"
              example:
                code: 200
                data:
                  docs: [
                    {
                      _id: "60d21b4667d0d8992e610c85",
                      url: "https://example.com",
                      owner: "60d21b4667d0d8992e610c85",
                      owner_email: "john.doe@example.com",
                      ping_time: "5m",
                      status: "online",
                      notify_offline: true,
                      offline_ping_count: 0,
                      createdAt: "2023-06-01T12:00:00Z",
                      updatedAt: "2023-06-01T12:00:00Z",
                      stats: {
                        uptime: 99.8,
                        logs: 100,
                        avgResponseTime: 234.5
                      }
                    }
                  ]
                  totalDocs: 1
                  limit: 10
                  totalPages: 1
                  page: 1
                  pagingCounter: 1
                  hasPrevPage: false
                  hasNextPage: false
                  prevPage: null
                  nextPage: null
                message: "User websites retrieved successfully"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'

  /websites/test:
    get:
      tags:
        - Websites
      summary: Test a website
      description: Test a website without adding it to monitoring
      operationId: testWebsite
      security:
        - bearerAuth: []
      parameters:
        - name: url
          in: query
          description: URL to test
          required: true
          schema:
            type: string
            format: uri
          example: "https://example.com"
      responses:
        '200':
          description: Website test result
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  data:
                    type: object
                    properties:
                      url:
                        type: string
                        format: uri
                        example: "https://example.com"
                      status:
                        type: string
                        enum: [online, offline]
                        example: "online"
                      statusCode:
                        type: integer
                        example: 200
                      responseTime:
                        type: number
                        example: 235.45
                      headers:
                        type: object
                      serverInfo:
                        type: object
                        properties:
                          server:
                            type: string
                            example: "nginx/1.18.0"
                          contentType:
                            type: string
                            example: "text/html; charset=utf-8"
                  message:
                    type: string
                    example: "Website test successful"
              examples:
                online:
                  summary: Website is online
                  value:
                    code: 200
                    data:
                      url: "https://example.com"
                      status: "online"
                      statusCode: 200
                      responseTime: 235.45
                      headers: 
                        "content-type": "text/html; charset=utf-8"
                        "server": "nginx/1.18.0"
                      
                      serverInfo: 
                        server: "nginx/1.18.0"
                        contentType: "text/html; charset=utf-8"
                      
                    message: "Website test successful"
                offline:
                  summary: Website is offline
                  value:
                    code: 200
                    data:
                      url: "https://example.com"
                      status: "offline"
                      statusCode: 0
                      error: "connect ECONNREFUSED"
                      isConnectionError: true
                    message: "Website test failed"
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/ServerError'

  /auth/google:
    get:
      tags:
        - Authentication
      summary: Authenticate with Google
      description: Initiate OAuth authentication flow with Google
      operationId: googleAuth
      responses:
        '302':
          description: Redirect to Google authentication page
  
  /auth/google/callback:
    get:
      tags:
        - Authentication
      summary: Google OAuth callback
      description: Callback endpoint for Google OAuth authentication
      operationId: googleCallback
      parameters:
        - name: code
          in: query
          description: Authorization code from Google
          schema:
            type: string
        - name: state
          in: query
          description: State parameter for CSRF protection
          schema:
            type: string
      responses:
        '302':
          description: Redirect to dashboard on successful authentication

  /auth/github:
    get:
      tags:
        - Authentication
      summary: Authenticate with GitHub
      description: Initiate OAuth authentication flow with GitHub
      operationId: githubAuth
      responses:
        '302':
          description: Redirect to GitHub authentication page
  
  /auth/github/callback:
    get:
      tags:
        - Authentication
      summary: GitHub OAuth callback
      description: Callback endpoint for GitHub OAuth authentication
  /websites/{id}/stats:
    parameters:
      - name: id
        in: path
        description: Website ID
        required: true
  /auth/github/callback:
    get:
      tags:
        - Authentication
      summary: GitHub OAuth callback
      description: Callback endpoint for GitHub OAuth authentication
      operationId: githubCallback
      parameters:
        - name: code
          in: query
          description: Authorization code from GitHub
          schema:
            type: string
        - name: state
          in: query
          description: State parameter for CSRF protection
          schema:
            type: string
      responses:
        '302':
          description: Redirect to dashboard on successful authentication

  /websites/{id}/stats:
    parameters:
      - name: id
        in: path
        description: Website ID
        required: true
        schema:
          type: string
          format: uuid
        example: "60d21b4667d0d8992e610c85"
      - name: period
        in: query
        description: Time period for statistics
        schema:
          type: string
          enum: [1h, 12h, 24h, 7d, 30d]
          default: 24h
        example: "24h"
    get:
      tags:
        - Websites
      summary: Get website statistics
      description: Get detailed statistics for a specific website
      operationId: getWebsiteStats
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Website statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  data:
                    type: object
                    properties:
                      url:
                        type: string
                        format: uri
                        example: "https://example.com"
                      status:
                        type: string
                        enum: [online, offline]
                        example: "online"
                      totalChecks:
                        type: integer
                        example: 1440
                      uptime:
                        type: number
                        example: 99.8
                      avgResponseTime:
                        type: number
                        example: 234.5
                      minResponseTime:
                        type: number
                        example: 100.2
                      maxResponseTime:
                        type: number
                        example: 500.8
                      responseTimeTrend:
                        type: string
                        enum: [improved, degraded, stable]
                        example: "stable"
                      lastChecked:
                        type: string
                        format: date-time
                      period:
                        type: string
                        example: "24h"
                  message:
                    type: string
                    example: "Website statistics retrieved successfully"
              example:
                code: 200
                data:
                  url: "https://example.com"
                  status: "online"
                  totalChecks: 1440
                  uptime: 99.8
                  avgResponseTime: 234.5
                  minResponseTime: 100.2
                  maxResponseTime: 500.8
                  responseTimeTrend: "stable"
                  lastChecked: "2023-06-01T12:00:00Z"
                  period: "24h"
                message: "Website statistics retrieved successfully"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'

  /websites/{id}/ping:
    parameters:
      - name: id
        in: path
        description: Website ID
        required: true
        schema:
          type: string
          format: uuid
        example: "60d21b4667d0d8992e610c85"
    get:
      tags:
        - Websites
      summary: Manually ping a website
      description: Manually trigger a ping for a specific website
      operationId: pingWebsite
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Website ping result
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  data:
                    type: object
                    properties:
                      url:
                        type: string
                        format: uri
                        example: "https://example.com"
                      status:
                        type: string
                        enum: [online, offline]
                        example: "online"
                      statusCode:
                        type: integer
                        example: 200
                      responseTime:
                        type: number
                        example: 235.45
                  message:
                    type: string
                    example: "Website ping successful"
              examples:
                pingSuccess:
                  summary: Website ping successful
                  value:
                    code: 200
                    data:
                      url: "https://example.com"
                      status: "online"
                      statusCode: 200
                      responseTime: 235.45
                    message: "Website ping successful"
                pingFailed:
                  summary: Website ping failed
                  value:
                    code: 200
                    data:
                      url: "https://example.com"
                      status: "offline"
                      statusCode: 0
                      error: "connect ECONNREFUSED"
                    message: "Website ping failed"
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'